version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: 512M

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry2
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8082
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  redis:
    image: redis:7.0
    container_name: redis2
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 128M

  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus2
    ports:
      - "8081:8081"
    volumes:
      - nexus-data:/nexus-data
    environment:
      - NEXUS_SECURITY_RANDOMPASSWORD=false
    restart: unless-stopped
    networks:
      - app-network

  eureka-server:
    build:
      context: ./Eureka-Server
    container_name: eureka-server2
    ports:
      - "8761:8761"
    networks:
      - app-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  user-service:
    build:
      context: ./user-service
    container_name: user-service2
    ports:
      - "5051:5051"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  product-service:
    build:
      context: ./product-service
    container_name: product-service2
    ports:
      - "5050:5050"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  cart-service:
    build:
      context: ./cart-service
    container_name: cart-service2
    ports:
      - "5056:5056"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  order-service:
    build:
      context: ./order-service
    container_name: order-service2
    ports:
      - "5053:5053"
    depends_on:
      - eureka-server
      - product-service
      - cart-service
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  payment-service:
    build:
      context: ./payment-service
    container_name: payment-service2
    ports:
      - "5054:5054"
    depends_on:
      - eureka-server
      - order-service
      - redis
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service2
    ports:
      - "5055:5055"
    depends_on:
      - eureka-server
      - user-service
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  gateway:
    build:
      context: ./gateway
    container_name: gateway2
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  graphql-gateway:
    build:
      context: ./graphql-gateway
    container_name: graphql-gateway2
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  websocket-gateway:
    build:
      context: ./Websocket-Gateway
    container_name: websocket-gateway2
    ports:
      - "8049:8049"
    depends_on:
      - eureka-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 128M

networks:
  app-network:
    driver: bridge

volumes:
  nexus-data:
